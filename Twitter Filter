// ==UserScript==
// @name         Twitter Ratio & Keyword Filter
// @namespace    http://tampermonkey.net/
// @version      0.3
// @description  Hide tweets from accounts based on keywords or suspicious follower/following ratios (excluding mutuals)
// @author       You
// @match        *://*.twitter.com/*
// @match        *://*.x.com/*
// @include      *://*.twitter.com/*
// @include      *://*.x.com/*
// @grant        GM_log
// @run-at       document-start
// ==/UserScript==

(function() {
    'use strict';

    // Comma-separated list of banned words to check in handle/description
    const bannedWordsList = "groyper,nafo";
    // Convert to array of trimmed lowercase words
    const bannedWords = bannedWordsList.split(',')
        .map(w => w.trim().toLowerCase())
        .filter(w => w);

    const settings = {
        follow_limit: 100, // Minimum follower threshold
    };

    let blf_exception_log = [];

    function log_exception(e) {
        while (blf_exception_log.length >= 10) {
            blf_exception_log.shift();
        }
        blf_exception_log.push(e);
        console.log('log_exception() got exception: ', e);
    }

    class TwitterUser {
        constructor(id, handle, name, followers, friends_count, we_follow, followed_by, description) {
            this.id = id;
            this.handle = handle;
            this.name = name;
            this.followers = followers;
            this.friends_count = friends_count;
            this.we_follow = we_follow;
            this.followed_by = followed_by;
            this.description = description || "";
        }
    }

    // Intercept Twitter API responses
    const oldXHROpen = XMLHttpRequest.prototype.open;
    XMLHttpRequest.prototype.open = function() {
        if (arguments.length >= 2) {
            const url = arguments[1];
            // Hook various Twitter API endpoints
            if (url.includes('/HomeTimeline') ||
                url.includes('/HomeLatestTimeline') ||
                url.includes('/TweetDetail') ||
                url.includes('/search/adaptive.json') ||
                url.includes('/notifications/all.json') ||
                url.includes('/notifications/mentions.json')) {

                if (!this._hooked) {
                    this._hooked = true;
                    hookXHRResponse(this);
                }
            }
        }
        return oldXHROpen.apply(this, arguments);
    };

    function hookXHRResponse(xhr) {
        const getter = function() {
            delete xhr.responseText;
            let response = xhr.responseText;

            try {
                let json = JSON.parse(response);
                filterContent(json);
                response = JSON.stringify(json);
            } catch (e) {
                log_exception(e);
            }

            Object.defineProperty(xhr, 'responseText', {
                value: response,
                writable: false
            });
            return response;
        };

        Object.defineProperty(xhr, 'responseText', {
            get: getter,
            configurable: true
        });
    }

    /**
     * Return an array of reasons to hide the user, or an empty array if no hide.
     */
    function getHideReasons(user) {
        // Bypass checks if mutual or we follow them
        if (user.we_follow || user.followed_by) {
            return [];
        }

        let reasons = [];

        // 1) Check banned words in handle or description
        const handleDesc = (user.handle + " " + user.description).toLowerCase();
        for (const w of bannedWords) {
            if (handleDesc.includes(w)) {
                reasons.push(`matched banned keyword: "${w}"`);
                // Don't break; if they fail multiple checks, we'll log them all.
            }
        }

        // 2) Check if following >= 10x the number of followers
        if (user.followers > 0 && user.friends_count >= 10 * user.followers) {
            reasons.push("follows >= 10x more accounts than followers");
        }

        // 3) Check if they have fewer than follow_limit followers
        if (user.followers < settings.follow_limit) {
            reasons.push(`has fewer than ${settings.follow_limit} followers`);
        }

        return reasons;
    }

    function hideTweet(tweetResults) {
        if (tweetResults.result && tweetResults.result.__typename === 'Tweet') {
            tweetResults.result.__typename = '';
        }
    }

    function filterContent(json) {
        // Process timeline data
        if (json.data) {
            const instructions = (
                json.data.home?.home_timeline_urt?.instructions ||
                json.data.threaded_conversation_with_injections_v2?.instructions ||
                []
            );

            instructions.forEach(instruction => {
                if (instruction.type === 'TimelineAddEntries') {
                    instruction.entries.forEach(entry => {
                        processEntry(entry);
                    });
                }
            });
        }
    }

    function processEntry(entry) {
        if (!entry.content) return;

        if (entry.content.entryType === 'TimelineTimelineItem') {
            processTimelineItem(entry.content.itemContent);
        } else if (entry.content.entryType === 'TimelineTimelineModule') {
            entry.content.items?.forEach(item => {
                processTimelineItem(item.item.itemContent);
            });
        }
    }

    function processTimelineItem(itemContent) {
        if (!itemContent || itemContent.itemType !== 'TimelineTweet') return;

        const tweetResults = itemContent.tweet_results;
        if (!tweetResults?.result) return;

        const userData = extractUserData(tweetResults.result);
        if (!userData) return;

        const reasons = getHideReasons(userData);
        if (reasons.length > 0) {
            hideTweet(tweetResults);
            console.log(
                `Filtered tweet from @${userData.handle} (followers: ${userData.followers}, following: ${userData.friends_count}). Reasons: ${reasons.join("; ")}`
            );
        }
    }

    function extractUserData(tweetData) {
        if (!tweetData.core?.user_results?.result) return null;

        const userObj = tweetData.core.user_results.result;
        const legacyData = userObj.legacy;
        if (!legacyData) return null;

        return new TwitterUser(
            userObj.rest_id,
            legacyData.screen_name,
            legacyData.name,
            legacyData.followers_count,
            legacyData.friends_count,
            legacyData.following,
            legacyData.followed_by,
            legacyData.description
        );
    }

    console.log('Twitter Ratio & Keyword Filter: Loaded');
})();
